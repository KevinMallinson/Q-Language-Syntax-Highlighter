{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Q",
  "patterns": [
    {
      "include": "#string-double"
    },
    {
      "include": "#string-single"
    },
    {
      "include": "#references"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#comments-block"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#meta"
    }
  ],
  "repository": {
    "string-double": {
      "name": "string.quoted.double.qlang",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.language.qlang",
          "match": "\\\\c[a-g_0-9]"
        },
        {
          "name": "constant.language.qlang",
          "match": "\\\\b[a-z_0-9]"
        },
        {
          "name": "constant.language.qlang",
          "match": "\\\\m[a-g_0-9]"
        },
        {
          "name": "constant.language.qlang",
          "match": "\\\\n"
        },
        {
          "name": "constant.other.qlang",
          "match": "\\\\\\\\"
        },
        {
          "name": "constant.other.placeholder.qlang",
          "match": "%[A-Za-z_]"
        }
      ]
    },
    "string-single": {
      "name": "string.quoted.single.qlang",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.language.qlang",
          "match": "\\\\c[a-g_0-9]"
        },
        {
          "name": "constant.language.qlang",
          "match": "\\\\b[a-z_0-9]"
        },
        {
          "name": "constant.language.qlang",
          "match": "\\\\m[a-g_0-9]"
        },
        {
          "name": "constant.language.qlang",
          "match": "\\\\n"
        },
        {
          "name": "constant.language.qlang",
          "match": "\\\\\\\\"
        },
        {
          "name": "constant.other.placeholder.qlang",
          "match": "%[A-Za-z_]"
        }
      ]
    },
    "references": {
      "patterns": [
        {
          "name": "variable.language.qlang",
          "match": "<[A-Za-z_][A-Za-z_0-9]*>"
        },
        {
          "name": "variable.language.qlang",
          "match": "<...>"
        }
      ]
    },
    "comments": {
      "name": "comment.line.qlang",
      "begin": "(//|;)",
      "end": "$\n?",
      "patterns": [
        {
          "match": "\\b(WARNING\\(|WARN\\(|ERROR\\(|BUG\\(|BUGS\\(|BUGGED\\()(.*)(\\))(?!\\w)",
          "captures": {
            "1": {
							"name": "invalid.illegal.qlang"
						},
						"2": {
							"name": "constant.other.placeholder.qlang"
						},
            "3": {
							"name": "invalid.illegal.qlang"
						}
          }
        },
        {
          "match": "\\b(TODO\\(|NOTE\\(|NOTES\\(|CLEANUP\\(|OPTI\\(|OPT\\(|OPTIMIZE\\()(.*)(\\))(?!\\w)",
          "captures": {
            "1": {
							"name": "invalid.depricated.qlang"
						},
						"2": {
							"name": "constant.other.placeholder.qlang"
						},
            "3": {
							"name": "invalid.depricated.qlang"
						}
          }
        }
      ]
    },
    "comments-block": {
      "name": "comment.block.qlang",
      "begin": "(?<!\/)/\\*",
      "end": "\\*/",
      "patterns": [
        {
          "match": "\\b(WARNING\\(|WARN\\(|ERROR\\(|BUG\\(|BUGS\\(|BUGGED\\()(.*)(\\))(?!\\w)",
          "captures": {
            "1": {
							"name": "invalid.illegal.qlang"
						},
						"2": {
							"name": "constant.other.placeholder.qlang"
						},
            "3": {
							"name": "invalid.illegal.qlang"
						}
          }
        },
        {
          "match": "\\b(TODO\\(|NOTE\\(|NOTES\\(|CLEANUP\\(|OPTI\\(|OPT\\(|OPTIMIZE\\()(.*)(\\))(?!\\w)",
          "captures": {
            "1": {
							"name": "invalid.depricated.qlang"
						},
						"2": {
							"name": "constant.other.placeholder.qlang"
						},
            "3": {
							"name": "invalid.depricated.qlang"
						}
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.qlang",
          "match": "\\b(if|else|endif|for|while|repeat|return|break|switch|endswitch|case |default)\\b"
        },
        {
          "name": "keyword.operator.qlang keyword.other.operator.qlang",
          "match": "\\||&|OR|AND|NOT"
        },
        {
          "name": "keyword.operator.qlang keyword.other.operator.qlang",
          "match": "\\+|\\-|\\*|\\/|\\<|\\>"
        },
        {
          "name": "keyword.operator.qlang keyword.other.operator.qlang",
          "match": "="
        },
        {
          "name": "constant.language.qlang",
          "match": "\\b(Random|RandomRange)\\b"
        },
        {
          "match": "\\b(script *)\\b(.+)\\b",
          "captures": {
            "1": {
							"name": "entity.name.function.qlang"
						},
						"2": {
							"name": "markup.underline"
						}
          }
        },
        {
          "match": "\\bendscript\\b",
          "name": "entity.name.function.qlang"
        },
        {
          "name": "entity.name.class.qlang",
          "match": "{|}"
        },
        {
          "name": "entity.name.class.qlang",
          "match": "\\(|\\)"
        },
        {
          "name": "entity.name.class.qlang",
          "match": "\\[|\\]"
        },
        {
          "name": "constant.numeric.qlang",
          "match": "\\b[0-9]+\\b"
        },
        {
          "name": "constant.language.qlang",
          "match": "\\@"
        }
      ]
    },
    "meta": {
      "name": "meta.preprocessor punctuation.definition.annotation.qlang",
      "begin": "#",
      "end": "$\n?",
      "patterns": [
        {
          "name": "keyword.control.qlang",
          "match": "\\b(ifdef|ifndef|else|endif|define|include)\\b"
        }
      ]
    }
  },
  "scopeName": "source.q"
}
