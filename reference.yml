%YAML 1.2
---
name: Q
file_extensions: [q]
scope: source.q

contexts:
  # 
  prototype:
    - include: comments
    - include: strings
    - include: references

  # strings
  strings:
    - match: '"'
      push:
      - meta_scope: string.quoted.double
      # colors
      - match: '\\c[a-g_0-9]'
        scope: constant.language
      # buttons
      - match: '\\b[a-z_0-9]'
        scope: constant.language
      # meta
      - match: '\\m[a-g_0-9]'
        scope: constant.language
      # newline
      - match: '\\n'
        scope: constant.language
      # path separator
      - match: '\\\\'
        scope: constant.other
      # placeholders
      - match: '%[A-Za-z_]'
        scope: constant.other.placeholder
      # end string
      - match: '"'
        pop: true
    - match: \'
      push:
      - meta_scope: string.quoted.single
      # colors
      - match: '\\c[a-g_0-9]'
        scope: constant.language
      # buttons
      - match: '\\b[a-z_0-9]'
        scope: constant.language
      # meta
      - match: '\\m[a-g_0-9]'
        scope: constant.language
      # newline
      - match: '\\n'
        scope: constant.language
      # path separator
      - match: '\\\\'
        scope: constant.other
      # placeholders
      - match: '%[A-Za-z_]'
        scope: constant.other.placeholder
      # end string
      - match: \'
        pop: true

  # references
  references:
    # reference local <something>
    - match: '<[A-Za-z_][A-Za-z_0-9]*>'
      scope: markup.italic variable.language
    # reference all args <...>
    - match: '<\.\.\.>'
      scope: markup.italic variable.language

  # comments
  comments:
    # inline comments
    - match: '//'
      scope: punctuation.definition.comment
      push:
       - meta_scope: comment.line 

       # comment prefixes 
       - match: \b(WARNING\(|WARN\(|ERROR\(|BUG\(|BUGS\(|BUGGED\()\b
         scope: invalid.illegal
         push: comment_prefix_bad

       # comment prefixes 
       - match: \b(TODO\(|NOTE\(|NOTES\(|OPTI\(|OPT\(|OPTIMIZE\(|CLEANUP\()\b
         scope: invalid.deprecated
         push: comment_prefix_good

       # end line
       - match: $\n?
         pop: true

    # inline comments
    - match: ';'
      scope: punctuation.definition.comment
      push:
       - meta_scope: comment.line
       # end line
       - match: $\n?
         pop: true

    # block comments
    - match: '(?<!\/)/\*'
      scope: punctuation.definition.comment
      push:
       - meta_scope: comment.block
       - match: '\*/'
         pop: true

  # comment prefix scope
  comment_prefix_good:
    - meta_scope: invalid.deprecated
    - match: $\n?
      pop: true
    - match: '\:'
      pop: true

  # comment prefix scope
  comment_prefix_bad:
    - meta_scope: invalid.illegal
    - match: $\n?
      pop: true
    - match: '\:'
      pop: true

  # main
  main:
    # control keywords
    - match: \b(if|else|endif|for|while|repeat|return|break)\b
      scope: keyword.control

    - match: '\||&'
      scope: keyword.operator

    - match: '\+|\-|\*|\/|\<|\>'
      scope: keyword.operator.arithmetic

    - match: '='
      scope: keyword.operator.assignment

    # keyword.operator.word
    - match: \b(OR|AND|NOT)\b
      scope: keyword.operator.word

    # control keywords
    - match: \b(switch|endswitch|case |default)\b
      scope: keyword.control

    # random / range keywords
    - match: \b(Random|RandomRange)\b
      scope: constant.language

    # function keywords
    - match: \b(script *|endscript)\b
      scope: keyword.declaration.function

    # struct
    - match: '{|}'
      scope: keyword.declaration.class

    # struct
    - match: '\(|\)'
      scope: keyword.declaration.function

    # array
    - match: '\[|\]'
      scope: keyword.declaration.struct

    # numbers
    - match: \b[0-9]+\b
      scope: constant.numeric

    # markers
    - match: '\@'
      scope: markup.italic constant.language

    # preprocessor
    - match: '#'
      scope: meta.preprocessor punctuation.definition.annotation
      push:
       # keywords
       - match: \b(ifdef|ifndef|else|endif|define|include)\b
         scope: keyword.control markup.italic
       - match: ' '
         pop: true
       - match: $\n?
         pop: true
